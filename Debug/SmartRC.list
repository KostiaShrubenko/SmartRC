
SmartRC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000404  08000404  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000404  08000404  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000404  08000404  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000404  08000404  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000404  08000404  00010404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000408  08000408  00010408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  0800040c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000004  08000410  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000048  08000410  00020048  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003297  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bc3  00000000  00000000  000232c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000012e4  00000000  00000000  00023e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001f8  00000000  00000000  00025170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001b0  00000000  00000000  00025368  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011ab8  00000000  00000000  00025518  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002872  00000000  00000000  00036fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005fd99  00000000  00000000  00039842  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000995db  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a0  00000000  00000000  00099658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080003ec 	.word	0x080003ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080003ec 	.word	0x080003ec

0800014c <DMA_TransferComplete_Callback>:
    };
}

void DMA_TransferComplete_Callback(void)
{
	u8DMA_ADCtransferStatus = DMA_TRANSFER_FINISHED;
 800014c:	4b01      	ldr	r3, [pc, #4]	; (8000154 <DMA_TransferComplete_Callback+0x8>)
 800014e:	2201      	movs	r2, #1
 8000150:	701a      	strb	r2, [r3, #0]
}
 8000152:	4770      	bx	lr
 8000154:	20000020 	.word	0x20000020

08000158 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000158:	4b0f      	ldr	r3, [pc, #60]	; (8000198 <SystemInit+0x40>)
 800015a:	681a      	ldr	r2, [r3, #0]
 800015c:	f042 0201 	orr.w	r2, r2, #1
 8000160:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000162:	6859      	ldr	r1, [r3, #4]
 8000164:	4a0d      	ldr	r2, [pc, #52]	; (800019c <SystemInit+0x44>)
 8000166:	400a      	ands	r2, r1
 8000168:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800016a:	681a      	ldr	r2, [r3, #0]
 800016c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000170:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000174:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000176:	681a      	ldr	r2, [r3, #0]
 8000178:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800017c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800017e:	685a      	ldr	r2, [r3, #4]
 8000180:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000184:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000186:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800018a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <SystemInit+0x48>)
 800018e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000192:	609a      	str	r2, [r3, #8]
#endif 
}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	40021000 	.word	0x40021000
 800019c:	f8ff0000 	.word	0xf8ff0000
 80001a0:	e000ed00 	.word	0xe000ed00

080001a4 <vTask_Init>:
#define NOP6	NOP4; NOP2
#define NOP8()	NOP4; NOP4;

void vTask_Init(void)
{
	NOP8();
 80001a4:	bf00      	nop
 80001a6:	bf00      	nop
 80001a8:	bf00      	nop
 80001aa:	bf00      	nop
 80001ac:	bf00      	nop
 80001ae:	bf00      	nop
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
}
 80001b4:	4770      	bx	lr

080001b6 <vTask_2ms>:

void vTask_2ms(void)
{

}
 80001b6:	4770      	bx	lr

080001b8 <vTask_10ms_0>:

void vTask_10ms_0(void)
{

}
 80001b8:	4770      	bx	lr

080001ba <vTask_10ms_1>:

void vTask_10ms_1(void)
{

}
 80001ba:	4770      	bx	lr

080001bc <vTask_20ms>:

void vTask_20ms(void)
{

}
 80001bc:	4770      	bx	lr
	...

080001c0 <Init_Clock>:
 * @brief Initialization of SystemClock source and 1ms SysTick.
 * @param None
 * @retval None
 */
void Init_Clock(void)
{
 80001c0:	b508      	push	{r3, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80001c2:	4b0c      	ldr	r3, [pc, #48]	; (80001f4 <Init_Clock+0x34>)
 80001c4:	685a      	ldr	r2, [r3, #4]
 80001c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80001ca:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80001cc:	685a      	ldr	r2, [r3, #4]
 80001ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80001d2:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80001d4:	685a      	ldr	r2, [r3, #4]
 80001d6:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 80001da:	605a      	str	r2, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80001dc:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <Init_Clock+0x38>)
 80001de:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80001e2:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80001e4:	2200      	movs	r2, #0
 80001e6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80001e8:	2207      	movs	r2, #7
 80001ea:	601a      	str	r2, [r3, #0]
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

	/* 2ms config with HSI 8MHz*/
	LL_InitTick(HSI_VALUE, 500);
	LL_SetSystemCoreClock(HSI_VALUE);
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <Init_Clock+0x3c>)
 80001ee:	f000 f8ad 	bl	800034c <LL_SetSystemCoreClock>
}
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	40021000 	.word	0x40021000
 80001f8:	e000e010 	.word	0xe000e010
 80001fc:	007a1200 	.word	0x007a1200

08000200 <main>:
{
 8000200:	b508      	push	{r3, lr}
 	Init_Clock();
 8000202:	f7ff ffdd 	bl	80001c0 <Init_Clock>
 	vScheduler_Init();
 8000206:	f000 f855 	bl	80002b4 <vScheduler_Init>
 	vScheduler();
 800020a:	f000 f803 	bl	8000214 <vScheduler>
}
 800020e:	2000      	movs	r0, #0
 8000210:	bd08      	pop	{r3, pc}
	...

08000214 <vScheduler>:
	vTaskInit(vTask_10ms_1, 10, 1);
	vTaskInit(vTask_20ms, 	20, 0);
}

void vScheduler(void)
{
 8000214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static uint8_t u8LastCounterValue = 0;
	uint8_t u8TaskPeriod = 0;
	uint8_t u8TaskOffset = 0;
	vTask_Init();
 8000218:	f7ff ffc4 	bl	80001a4 <vTask_Init>

	while(1)
	{
		u8SystemCounter = 0;
 800021c:	4c15      	ldr	r4, [pc, #84]	; (8000274 <vScheduler+0x60>)
 800021e:	f04f 0700 	mov.w	r7, #0
		while (u8SystemCounter < 10)
		{
			u8LastCounterValue = u8SystemCounter;
			atTasks[0].pfRoutine();
 8000222:	4e15      	ldr	r6, [pc, #84]	; (8000278 <vScheduler+0x64>)
 8000224:	f106 0518 	add.w	r5, r6, #24
		u8SystemCounter = 0;
 8000228:	7027      	strb	r7, [r4, #0]
		while (u8SystemCounter < 10)
 800022a:	e003      	b.n	8000234 <vScheduler+0x20>
				if (IS_PERIOD_LAST(u8SystemCounter, u8TaskPeriod, u8TaskOffset) == 1)
				{
					atTasks[u8TaskIndex].pfRoutine();
				}
			}
			while (u8LastCounterValue == u8SystemCounter)
 800022c:	7823      	ldrb	r3, [r4, #0]
 800022e:	b2db      	uxtb	r3, r3
 8000230:	429a      	cmp	r2, r3
 8000232:	d0fb      	beq.n	800022c <vScheduler+0x18>
		while (u8SystemCounter < 10)
 8000234:	7823      	ldrb	r3, [r4, #0]
 8000236:	b2db      	uxtb	r3, r3
 8000238:	2b09      	cmp	r3, #9
 800023a:	d8f5      	bhi.n	8000228 <vScheduler+0x14>
			u8LastCounterValue = u8SystemCounter;
 800023c:	7822      	ldrb	r2, [r4, #0]
 800023e:	4b0f      	ldr	r3, [pc, #60]	; (800027c <vScheduler+0x68>)
 8000240:	701a      	strb	r2, [r3, #0]
			atTasks[0].pfRoutine();
 8000242:	6873      	ldr	r3, [r6, #4]
 8000244:	4798      	blx	r3
 8000246:	46b0      	mov	r8, r6
				if (IS_PERIOD_LAST(u8SystemCounter, u8TaskPeriod, u8TaskOffset) == 1)
 8000248:	7823      	ldrb	r3, [r4, #0]
 800024a:	b25b      	sxtb	r3, r3
 800024c:	f998 2009 	ldrsb.w	r2, [r8, #9]
 8000250:	1a9b      	subs	r3, r3, r2
 8000252:	f898 1008 	ldrb.w	r1, [r8, #8]
 8000256:	fb93 f2f1 	sdiv	r2, r3, r1
 800025a:	fb01 3312 	mls	r3, r1, r2, r3
 800025e:	b913      	cbnz	r3, 8000266 <vScheduler+0x52>
					atTasks[u8TaskIndex].pfRoutine();
 8000260:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000264:	4798      	blx	r3
 8000266:	f108 0808 	add.w	r8, r8, #8
			for (uint8_t u8TaskIndex = 1; u8TaskIndex < TASKS_AMOUNT; u8TaskIndex++)
 800026a:	45a8      	cmp	r8, r5
 800026c:	d1ec      	bne.n	8000248 <vScheduler+0x34>
			while (u8LastCounterValue == u8SystemCounter)
 800026e:	4b03      	ldr	r3, [pc, #12]	; (800027c <vScheduler+0x68>)
 8000270:	781a      	ldrb	r2, [r3, #0]
 8000272:	e7db      	b.n	800022c <vScheduler+0x18>
 8000274:	20000024 	.word	0x20000024
 8000278:	20000028 	.word	0x20000028
 800027c:	20000022 	.word	0x20000022

08000280 <vTaskInit>:

void vTaskInit(void *pvRoutine, uint8_t u8Period, uint8_t u8Offset)
{
	static uint8_t u8Index = 0;

	if (u8Index < TASKS_AMOUNT)
 8000280:	4b0a      	ldr	r3, [pc, #40]	; (80002ac <vTaskInit+0x2c>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b03      	cmp	r3, #3
 8000286:	d80d      	bhi.n	80002a4 <vTaskInit+0x24>
{
 8000288:	b430      	push	{r4, r5}
	{
		atTasks[u8Index].pfRoutine = pvRoutine;
 800028a:	4d09      	ldr	r5, [pc, #36]	; (80002b0 <vTaskInit+0x30>)
 800028c:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 8000290:	6060      	str	r0, [r4, #4]
		atTasks[u8Index].u8Period  = u8Period / SYS_TICK_PERIOD;
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	f805 1033 	strb.w	r1, [r5, r3, lsl #3]
		atTasks[u8Index].u8Offset  = u8Offset;
 8000298:	7062      	strb	r2, [r4, #1]
	}

	u8Index++;
 800029a:	3301      	adds	r3, #1
 800029c:	4a03      	ldr	r2, [pc, #12]	; (80002ac <vTaskInit+0x2c>)
 800029e:	7013      	strb	r3, [r2, #0]
}
 80002a0:	bc30      	pop	{r4, r5}
 80002a2:	4770      	bx	lr
	u8Index++;
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a01      	ldr	r2, [pc, #4]	; (80002ac <vTaskInit+0x2c>)
 80002a8:	7013      	strb	r3, [r2, #0]
 80002aa:	4770      	bx	lr
 80002ac:	20000021 	.word	0x20000021
 80002b0:	20000028 	.word	0x20000028

080002b4 <vScheduler_Init>:
{
 80002b4:	b508      	push	{r3, lr}
	vTaskInit(vTask_2ms, 	2,  0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	4809      	ldr	r0, [pc, #36]	; (80002e0 <vScheduler_Init+0x2c>)
 80002bc:	f7ff ffe0 	bl	8000280 <vTaskInit>
	vTaskInit(vTask_10ms_0, 10, 0);
 80002c0:	2200      	movs	r2, #0
 80002c2:	210a      	movs	r1, #10
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <vScheduler_Init+0x30>)
 80002c6:	f7ff ffdb 	bl	8000280 <vTaskInit>
	vTaskInit(vTask_10ms_1, 10, 1);
 80002ca:	2201      	movs	r2, #1
 80002cc:	210a      	movs	r1, #10
 80002ce:	4806      	ldr	r0, [pc, #24]	; (80002e8 <vScheduler_Init+0x34>)
 80002d0:	f7ff ffd6 	bl	8000280 <vTaskInit>
	vTaskInit(vTask_20ms, 	20, 0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2114      	movs	r1, #20
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <vScheduler_Init+0x38>)
 80002da:	f7ff ffd1 	bl	8000280 <vTaskInit>
}
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	080001b7 	.word	0x080001b7
 80002e4:	080001b9 	.word	0x080001b9
 80002e8:	080001bb 	.word	0x080001bb
 80002ec:	080001bd 	.word	0x080001bd

080002f0 <vScheduler_SysTick_Callback>:

void vScheduler_SysTick_Callback(void)
{
	u8SystemCounter++;
 80002f0:	4a02      	ldr	r2, [pc, #8]	; (80002fc <vScheduler_SysTick_Callback+0xc>)
 80002f2:	7813      	ldrb	r3, [r2, #0]
 80002f4:	3301      	adds	r3, #1
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	7013      	strb	r3, [r2, #0]
}
 80002fa:	4770      	bx	lr
 80002fc:	20000024 	.word	0x20000024

08000300 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000300:	4770      	bx	lr

08000302 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000302:	e7fe      	b.n	8000302 <HardFault_Handler>

08000304 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000304:	e7fe      	b.n	8000304 <MemManage_Handler>

08000306 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000306:	e7fe      	b.n	8000306 <BusFault_Handler>

08000308 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000308:	e7fe      	b.n	8000308 <UsageFault_Handler>

0800030a <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 800030a:	4770      	bx	lr

0800030c <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 800030c:	4770      	bx	lr

0800030e <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800030e:	4770      	bx	lr

08000310 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000310:	b508      	push	{r3, lr}
	vScheduler_SysTick_Callback();
 8000312:	f7ff ffed 	bl	80002f0 <vScheduler_SysTick_Callback>
}
 8000316:	bd08      	pop	{r3, pc}

08000318 <ADC1_2_IRQHandler>:
  * @param  None
  * @retval None
  */
void ADC1_IRQHandler(void)
{
}
 8000318:	4770      	bx	lr
	...

0800031c <DMA1_Channel1_IRQHandler>:
  * @brief  This function handles DMA1 interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel1_IRQHandler(void)
{
 800031c:	b508      	push	{r3, lr}
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <DMA1_Channel1_IRQHandler+0x2c>)
 8000320:	681b      	ldr	r3, [r3, #0]
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 8000322:	f013 0f02 	tst.w	r3, #2
 8000326:	d108      	bne.n	800033a <DMA1_Channel1_IRQHandler+0x1e>
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TE1(DMA_TypeDef *DMAx)
{
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 8000328:	4b07      	ldr	r3, [pc, #28]	; (8000348 <DMA1_Channel1_IRQHandler+0x2c>)
 800032a:	681b      	ldr	r3, [r3, #0]
    LL_DMA_ClearFlag_GI1(DMA1);
    DMA_TransferComplete_Callback();
  }

  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 800032c:	f013 0f08 	tst.w	r3, #8
 8000330:	d002      	beq.n	8000338 <DMA1_Channel1_IRQHandler+0x1c>
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TE1(DMA_TypeDef *DMAx)
{
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <DMA1_Channel1_IRQHandler+0x2c>)
 8000334:	2208      	movs	r2, #8
 8000336:	605a      	str	r2, [r3, #4]
  {
    /* Clear flag DMA transfer error */
    LL_DMA_ClearFlag_TE1(DMA1);
  }
}
 8000338:	bd08      	pop	{r3, pc}
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 800033a:	4b03      	ldr	r3, [pc, #12]	; (8000348 <DMA1_Channel1_IRQHandler+0x2c>)
 800033c:	2201      	movs	r2, #1
 800033e:	605a      	str	r2, [r3, #4]
    DMA_TransferComplete_Callback();
 8000340:	f7ff ff04 	bl	800014c <DMA_TransferComplete_Callback>
 8000344:	e7f0      	b.n	8000328 <DMA1_Channel1_IRQHandler+0xc>
 8000346:	bf00      	nop
 8000348:	40020000 	.word	0x40020000

0800034c <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800034c:	4b01      	ldr	r3, [pc, #4]	; (8000354 <LL_SetSystemCoreClock+0x8>)
 800034e:	6018      	str	r0, [r3, #0]
}
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	20000000 	.word	0x20000000

08000358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000358:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800035a:	e003      	b.n	8000364 <LoopCopyDataInit>

0800035c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800035e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000360:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000362:	3104      	adds	r1, #4

08000364 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000364:	480a      	ldr	r0, [pc, #40]	; (8000390 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000368:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800036a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800036c:	d3f6      	bcc.n	800035c <CopyDataInit>
  ldr r2, =_sbss
 800036e:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000370:	e002      	b.n	8000378 <LoopFillZerobss>

08000372 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000372:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000374:	f842 3b04 	str.w	r3, [r2], #4

08000378 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800037a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800037c:	d3f9      	bcc.n	8000372 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800037e:	f7ff feeb 	bl	8000158 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000382:	f000 f80f 	bl	80003a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000386:	f7ff ff3b 	bl	8000200 <main>
  bx lr
 800038a:	4770      	bx	lr
  ldr r3, =_sidata
 800038c:	0800040c 	.word	0x0800040c
  ldr r0, =_sdata
 8000390:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000394:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8000398:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 800039c:	20000048 	.word	0x20000048

080003a0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a0:	e7fe      	b.n	80003a0 <CAN1_RX1_IRQHandler>
	...

080003a4 <__libc_init_array>:
 80003a4:	b570      	push	{r4, r5, r6, lr}
 80003a6:	2500      	movs	r5, #0
 80003a8:	4e0c      	ldr	r6, [pc, #48]	; (80003dc <__libc_init_array+0x38>)
 80003aa:	4c0d      	ldr	r4, [pc, #52]	; (80003e0 <__libc_init_array+0x3c>)
 80003ac:	1ba4      	subs	r4, r4, r6
 80003ae:	10a4      	asrs	r4, r4, #2
 80003b0:	42a5      	cmp	r5, r4
 80003b2:	d109      	bne.n	80003c8 <__libc_init_array+0x24>
 80003b4:	f000 f81a 	bl	80003ec <_init>
 80003b8:	2500      	movs	r5, #0
 80003ba:	4e0a      	ldr	r6, [pc, #40]	; (80003e4 <__libc_init_array+0x40>)
 80003bc:	4c0a      	ldr	r4, [pc, #40]	; (80003e8 <__libc_init_array+0x44>)
 80003be:	1ba4      	subs	r4, r4, r6
 80003c0:	10a4      	asrs	r4, r4, #2
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	d105      	bne.n	80003d2 <__libc_init_array+0x2e>
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003cc:	4798      	blx	r3
 80003ce:	3501      	adds	r5, #1
 80003d0:	e7ee      	b.n	80003b0 <__libc_init_array+0xc>
 80003d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003d6:	4798      	blx	r3
 80003d8:	3501      	adds	r5, #1
 80003da:	e7f2      	b.n	80003c2 <__libc_init_array+0x1e>
 80003dc:	08000404 	.word	0x08000404
 80003e0:	08000404 	.word	0x08000404
 80003e4:	08000404 	.word	0x08000404
 80003e8:	08000408 	.word	0x08000408

080003ec <_init>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr

080003f8 <_fini>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr
