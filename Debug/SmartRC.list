
SmartRC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000824  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000930  08000930  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000930  08000930  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000930  08000930  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000930  08000930  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000930  08000930  00010930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000934  08000934  00010934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000004  0800093c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  0800093c  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000037a0  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c5e  00000000  00000000  000237cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000156a  00000000  00000000  0002442b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001b8  00000000  00000000  00025998  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00025b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00011af6  00000000  00000000  00025d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002418  00000000  00000000  0003780e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005ff2f  00000000  00000000  00039c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00099b55  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000338  00000000  00000000  00099bd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000918 	.word	0x08000918

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000918 	.word	0x08000918

0800014c <ChargeRoutine>:
	ADC_Init();
	ADC_Activate();
}

void ChargeRoutine(void)
{
 800014c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000150:	204b      	movs	r0, #75	; 0x4b
	for (uint16_t i = 0; i < 75; i++)
	{
		MODIFY_REG(BOTTOM_PORT->CRL, BOTTOM_CRL_MASK, BOTTOM_CRL_MODE_FLOAT);
 8000152:	4a2e      	ldr	r2, [pc, #184]	; (800020c <ChargeRoutine+0xc0>)
		MODIFY_REG(BOTTOM_PORT->CRH, BOTTOM_CRH_MASK, BOTTOM_CRH_MODE_FLOAT);
 8000154:	4c2e      	ldr	r4, [pc, #184]	; (8000210 <ChargeRoutine+0xc4>)
 8000156:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000228 <ChargeRoutine+0xdc>

		MODIFY_REG(TOP_PORT->CRL, TOP_CRL_MASK, TOP_MODE_OUTPUT);
 800015a:	492e      	ldr	r1, [pc, #184]	; (8000214 <ChargeRoutine+0xc8>)
 800015c:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 8000224 <ChargeRoutine+0xd8>
  * @param  PortValue Level value for each pin of the port
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
{
  WRITE_REG(GPIOx->ODR, PortValue);
 8000160:	f04f 0cfe 	mov.w	ip, #254	; 0xfe
		LL_GPIO_WriteOutputPort(TOP_PORT, TOP_HIGH_LEVEL);

		//NOP4;

		MODIFY_REG(TOP_PORT->CRL, TOP_CRL_MASK, TOP_MODE_FLOAT);
 8000164:	4f2c      	ldr	r7, [pc, #176]	; (8000218 <ChargeRoutine+0xcc>)

		MODIFY_REG(BOTTOM_PORT->CRL, BOTTOM_CRL_MASK, BOTTOM_CRL_MODE_OUTPUT);
		MODIFY_REG(BOTTOM_PORT->CRH, BOTTOM_CRH_MASK, BOTTOM_CRH_MODE_OUTPUT);
 8000166:	4e2d      	ldr	r6, [pc, #180]	; (800021c <ChargeRoutine+0xd0>)
 8000168:	2500      	movs	r5, #0
		MODIFY_REG(BOTTOM_PORT->CRL, BOTTOM_CRL_MASK, BOTTOM_CRL_MODE_FLOAT);
 800016a:	6813      	ldr	r3, [r2, #0]
 800016c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000170:	f023 030f 	bic.w	r3, r3, #15
 8000174:	f443 6388 	orr.w	r3, r3, #1088	; 0x440
 8000178:	f043 0304 	orr.w	r3, r3, #4
 800017c:	6013      	str	r3, [r2, #0]
		MODIFY_REG(BOTTOM_PORT->CRH, BOTTOM_CRH_MASK, BOTTOM_CRH_MODE_FLOAT);
 800017e:	6853      	ldr	r3, [r2, #4]
 8000180:	4023      	ands	r3, r4
 8000182:	ea43 0308 	orr.w	r3, r3, r8
 8000186:	6053      	str	r3, [r2, #4]
		MODIFY_REG(TOP_PORT->CRL, TOP_CRL_MASK, TOP_MODE_OUTPUT);
 8000188:	680b      	ldr	r3, [r1, #0]
 800018a:	f003 030f 	and.w	r3, r3, #15
 800018e:	ea43 030e 	orr.w	r3, r3, lr
 8000192:	600b      	str	r3, [r1, #0]
 8000194:	f8c1 c00c 	str.w	ip, [r1, #12]
		MODIFY_REG(TOP_PORT->CRL, TOP_CRL_MASK, TOP_MODE_FLOAT);
 8000198:	680b      	ldr	r3, [r1, #0]
 800019a:	f003 030f 	and.w	r3, r3, #15
 800019e:	433b      	orrs	r3, r7
 80001a0:	600b      	str	r3, [r1, #0]
		MODIFY_REG(BOTTOM_PORT->CRL, BOTTOM_CRL_MASK, BOTTOM_CRL_MODE_OUTPUT);
 80001a2:	6813      	ldr	r3, [r2, #0]
 80001a4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80001a8:	f023 030f 	bic.w	r3, r3, #15
 80001ac:	f443 7308 	orr.w	r3, r3, #544	; 0x220
 80001b0:	f043 0302 	orr.w	r3, r3, #2
 80001b4:	6013      	str	r3, [r2, #0]
		MODIFY_REG(BOTTOM_PORT->CRH, BOTTOM_CRH_MASK, BOTTOM_CRH_MODE_OUTPUT);
 80001b6:	6853      	ldr	r3, [r2, #4]
 80001b8:	4023      	ands	r3, r4
 80001ba:	4333      	orrs	r3, r6
 80001bc:	6053      	str	r3, [r2, #4]
 80001be:	60d5      	str	r5, [r2, #12]
 80001c0:	3801      	subs	r0, #1
 80001c2:	b280      	uxth	r0, r0
	for (uint16_t i = 0; i < 75; i++)
 80001c4:	2800      	cmp	r0, #0
 80001c6:	d1d0      	bne.n	800016a <ChargeRoutine+0x1e>
		LL_GPIO_WriteOutputPort(BOTTOM_PORT, BOTTOM_LOW_LEVEL);

		//NOP2;
	}
	MODIFY_REG(TOP_PORT->CRL, TOP_CRL_MASK, TOP_MODE_ANALOG);
 80001c8:	4a12      	ldr	r2, [pc, #72]	; (8000214 <ChargeRoutine+0xc8>)
 80001ca:	6813      	ldr	r3, [r2, #0]
 80001cc:	f003 030f 	and.w	r3, r3, #15
 80001d0:	6013      	str	r3, [r2, #0]
	NOP4;
 80001d2:	bf00      	nop
 80001d4:	bf00      	nop
 80001d6:	bf00      	nop
 80001d8:	bf00      	nop
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversionSWStart(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80001da:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80001de:	6893      	ldr	r3, [r2, #8]
 80001e0:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 80001e4:	6093      	str	r3, [r2, #8]

	LL_ADC_REG_StartConversionSWStart(ADC1);
	while (eDMA_ADCtransferStatus != DMA_TransferComplete)
 80001e6:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <ChargeRoutine+0xd4>)
 80001e8:	7813      	ldrb	r3, [r2, #0]
 80001ea:	b2db      	uxtb	r3, r3
 80001ec:	2b01      	cmp	r3, #1
 80001ee:	d1fb      	bne.n	80001e8 <ChargeRoutine+0x9c>
	{
	}
	eDMA_ADCtransferStatus = DMA_TransferIsntComplete;
 80001f0:	2000      	movs	r0, #0
 80001f2:	4b0b      	ldr	r3, [pc, #44]	; (8000220 <ChargeRoutine+0xd4>)
 80001f4:	7018      	strb	r0, [r3, #0]
	//NOP64;
	MODIFY_REG(TOP_PORT->CRL, TOP_CRL_MASK, TOP_MODE_OUTPUT);
 80001f6:	4b07      	ldr	r3, [pc, #28]	; (8000214 <ChargeRoutine+0xc8>)
 80001f8:	6819      	ldr	r1, [r3, #0]
 80001fa:	f001 010f 	and.w	r1, r1, #15
 80001fe:	4a09      	ldr	r2, [pc, #36]	; (8000224 <ChargeRoutine+0xd8>)
 8000200:	430a      	orrs	r2, r1
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	60d8      	str	r0, [r3, #12]
	LL_GPIO_WriteOutputPort(TOP_PORT, TOP_LOW_LEVEL);
}
 8000206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800020a:	bf00      	nop
 800020c:	40010c00 	.word	0x40010c00
 8000210:	f00000ff 	.word	0xf00000ff
 8000214:	40010800 	.word	0x40010800
 8000218:	44444440 	.word	0x44444440
 800021c:	02222200 	.word	0x02222200
 8000220:	20000020 	.word	0x20000020
 8000224:	11111110 	.word	0x11111110
 8000228:	04444400 	.word	0x04444400

0800022c <DMA_Init>:

void DMA_Init(void)
{
 800022c:	b082      	sub	sp, #8
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800022e:	4b1a      	ldr	r3, [pc, #104]	; (8000298 <DMA_Init+0x6c>)
 8000230:	2210      	movs	r2, #16
 8000232:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000236:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800023a:	601a      	str	r2, [r3, #0]
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <DMA_Init+0x70>)
 800023e:	695a      	ldr	r2, [r3, #20]
 8000240:	f042 0201 	orr.w	r2, r2, #1
 8000244:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	f003 0301 	and.w	r3, r3, #1
 800024c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800024e:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_DMA_PRIORITY_LOW or @ref LL_DMA_PRIORITY_MEDIUM or @ref LL_DMA_PRIORITY_HIGH or @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigTransfer(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Configuration)
{
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000250:	4b13      	ldr	r3, [pc, #76]	; (80002a0 <DMA_Init+0x74>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000258:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800025c:	f442 5216 	orr.w	r2, r2, #9600	; 0x2580
 8000260:	f042 0220 	orr.w	r2, r2, #32
 8000264:	601a      	str	r2, [r3, #0]
    data_reg_addr = (uint32_t)&(ADCx->DR);
 8000266:	4a0f      	ldr	r2, [pc, #60]	; (80002a4 <DMA_Init+0x78>)
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
  }
  /* Direction Periph to Memory and Memory to Memory */
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8000268:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800026a:	4a0f      	ldr	r2, [pc, #60]	; (80002a8 <DMA_Init+0x7c>)
 800026c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800026e:	685a      	ldr	r2, [r3, #4]
 8000270:	0c12      	lsrs	r2, r2, #16
 8000272:	0412      	lsls	r2, r2, #16
 8000274:	f042 0206 	orr.w	r2, r2, #6
 8000278:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	f042 0202 	orr.w	r2, r2, #2
 8000280:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8000282:	681a      	ldr	r2, [r3, #0]
 8000284:	f042 0208 	orr.w	r2, r2, #8
 8000288:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	f042 0201 	orr.w	r2, r2, #1
 8000290:	601a      	str	r2, [r3, #0]
						DMA_CHANNEL_ADC);
	/*## Activation of DMA #####################################################*/
	/* Enable the DMA transfer */
	LL_DMA_EnableChannel(DMA1,
	                     DMA_CHANNEL_ADC);
}
 8000292:	b002      	add	sp, #8
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000e100 	.word	0xe000e100
 800029c:	40021000 	.word	0x40021000
 80002a0:	40020008 	.word	0x40020008
 80002a4:	4001244c 	.word	0x4001244c
 80002a8:	2000004c 	.word	0x2000004c

080002ac <ADC_Init>:

void ADC_Init(void)
{
 80002ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80002b0:	b082      	sub	sp, #8
	MODIFY_REG(TOP_PORT->CRL, TOP_CRL_MASK, TOP_MODE_ANALOG);
 80002b2:	4aad      	ldr	r2, [pc, #692]	; (8000568 <ADC_Init+0x2bc>)
 80002b4:	6813      	ldr	r3, [r2, #0]
 80002b6:	f003 030f 	and.w	r3, r3, #15
 80002ba:	6013      	str	r3, [r2, #0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	4bab      	ldr	r3, [pc, #684]	; (800056c <ADC_Init+0x2c0>)
 80002be:	2200      	movs	r2, #0
 80002c0:	f883 2312 	strb.w	r2, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80002c8:	601a      	str	r2, [r3, #0]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80002ca:	4ba9      	ldr	r3, [pc, #676]	; (8000570 <ADC_Init+0x2c4>)
 80002cc:	699a      	ldr	r2, [r3, #24]
 80002ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002d2:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80002d4:	699a      	ldr	r2, [r3, #24]
 80002d6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80002da:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80002dc:	9a01      	ldr	r2, [sp, #4]
  *         @arg @ref LL_RCC_ADC_CLKSRC_PCLK2_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_ADCPRE, ADCxSource);
 80002de:	685a      	ldr	r2, [r3, #4]
 80002e0:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80002e4:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR1, ADC_CR1_SCAN, ScanMode);
 80002e6:	4aa3      	ldr	r2, [pc, #652]	; (8000574 <ADC_Init+0x2c8>)
 80002e8:	6853      	ldr	r3, [r2, #4]
 80002ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ee:	6053      	str	r3, [r2, #4]
  MODIFY_REG(ADCx->CR2, ADC_CR2_EXTSEL, (TriggerSource & ADC_CR2_EXTSEL));
 80002f0:	6893      	ldr	r3, [r2, #8]
 80002f2:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80002f6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CR2, ADC_CR2_CONT, Continuous);
 80002f8:	6893      	ldr	r3, [r2, #8]
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->CR2, ADC_CR2_DMA, DMATransfer);
 8000300:	6893      	ldr	r3, [r2, #8]
 8000302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000306:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8000308:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800030a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800030e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000312:	62d3      	str	r3, [r2, #44]	; 0x2c
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000314:	4b98      	ldr	r3, [pc, #608]	; (8000578 <ADC_Init+0x2cc>)
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000316:	f44f 7140 	mov.w	r1, #768	; 0x300
 800031a:	fa91 f4a1 	rbit	r4, r1
 800031e:	fab4 f484 	clz	r4, r4
 8000322:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000326:	fa20 f404 	lsr.w	r4, r0, r4
  MODIFY_REG(*preg,
 800032a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800032e:	f025 051f 	bic.w	r5, r5, #31
 8000332:	f045 0501 	orr.w	r5, r5, #1
 8000336:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 800033a:	fa91 f4a1 	rbit	r4, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800033e:	fab4 f484 	clz	r4, r4
 8000342:	fa20 f404 	lsr.w	r4, r0, r4
  MODIFY_REG(*preg,
 8000346:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800034a:	f425 7578 	bic.w	r5, r5, #992	; 0x3e0
 800034e:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8000352:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8000356:	fa91 f4a1 	rbit	r4, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800035a:	fab4 f484 	clz	r4, r4
 800035e:	fa20 f404 	lsr.w	r4, r0, r4
  MODIFY_REG(*preg,
 8000362:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8000366:	f425 45f8 	bic.w	r5, r5, #31744	; 0x7c00
 800036a:	f445 6540 	orr.w	r5, r5, #3072	; 0xc00
 800036e:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 8000372:	fa91 f4a1 	rbit	r4, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000376:	fab4 f484 	clz	r4, r4
 800037a:	fa20 f404 	lsr.w	r4, r0, r4
  MODIFY_REG(*preg,
 800037e:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8000382:	f425 2578 	bic.w	r5, r5, #1015808	; 0xf8000
 8000386:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
 800038a:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 800038e:	fa91 f4a1 	rbit	r4, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8000392:	fab4 f484 	clz	r4, r4
 8000396:	fa20 f404 	lsr.w	r4, r0, r4
  MODIFY_REG(*preg,
 800039a:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 800039e:	f025 75f8 	bic.w	r5, r5, #32505856	; 0x1f00000
 80003a2:	f445 05a0 	orr.w	r5, r5, #5242880	; 0x500000
 80003a6:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
 80003aa:	fa91 f1a1 	rbit	r1, r1
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80003ae:	fab1 f181 	clz	r1, r1
 80003b2:	fa20 f101 	lsr.w	r1, r0, r1
  MODIFY_REG(*preg,
 80003b6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80003ba:	f020 5078 	bic.w	r0, r0, #1040187392	; 0x3e000000
 80003be:	f040 6040 	orr.w	r0, r0, #201326592	; 0xc000000
 80003c2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80003c6:	496d      	ldr	r1, [pc, #436]	; (800057c <ADC_Init+0x2d0>)
 80003c8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80003cc:	fa90 f7a0 	rbit	r7, r0
 80003d0:	fab7 f787 	clz	r7, r7
 80003d4:	fa20 f707 	lsr.w	r7, r0, r7
  MODIFY_REG(*preg,
 80003d8:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 80003dc:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 80003e0:	fa93 f4a3 	rbit	r4, r3
 80003e4:	fab4 f484 	clz	r4, r4
 80003e8:	fa93 fca3 	rbit	ip, r3
 80003ec:	b2e4      	uxtb	r4, r4
 80003ee:	f44f 1540 	mov.w	r5, #3145728	; 0x300000
 80003f2:	fa25 f404 	lsr.w	r4, r5, r4
 80003f6:	2607      	movs	r6, #7
 80003f8:	fa06 f404 	lsl.w	r4, r6, r4
 80003fc:	ea2e 0404 	bic.w	r4, lr, r4
 8000400:	fabc fc8c 	clz	ip, ip
 8000404:	fa25 fc0c 	lsr.w	ip, r5, ip
 8000408:	2504      	movs	r5, #4
 800040a:	fa05 fc0c 	lsl.w	ip, r5, ip
 800040e:	ea44 040c 	orr.w	r4, r4, ip
 8000412:	f841 4027 	str.w	r4, [r1, r7, lsl #2]
 8000416:	fa90 f7a0 	rbit	r7, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800041a:	fab7 f787 	clz	r7, r7
 800041e:	fa20 f707 	lsr.w	r7, r0, r7
  MODIFY_REG(*preg,
 8000422:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8000426:	fa93 f4a3 	rbit	r4, r3
 800042a:	fab4 f484 	clz	r4, r4
 800042e:	fa93 f8a3 	rbit	r8, r3
 8000432:	b2e4      	uxtb	r4, r4
 8000434:	f44f 0cc0 	mov.w	ip, #6291456	; 0x600000
 8000438:	fa2c f404 	lsr.w	r4, ip, r4
 800043c:	fa06 f404 	lsl.w	r4, r6, r4
 8000440:	ea2e 0404 	bic.w	r4, lr, r4
 8000444:	fab8 f888 	clz	r8, r8
 8000448:	fa2c fc08 	lsr.w	ip, ip, r8
 800044c:	fa05 fc0c 	lsl.w	ip, r5, ip
 8000450:	ea44 040c 	orr.w	r4, r4, ip
 8000454:	f841 4027 	str.w	r4, [r1, r7, lsl #2]
 8000458:	fa90 f7a0 	rbit	r7, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800045c:	fab7 f787 	clz	r7, r7
 8000460:	fa20 f707 	lsr.w	r7, r0, r7
  MODIFY_REG(*preg,
 8000464:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 8000468:	fa93 f4a3 	rbit	r4, r3
 800046c:	fab4 f484 	clz	r4, r4
 8000470:	fa93 f8a3 	rbit	r8, r3
 8000474:	b2e4      	uxtb	r4, r4
 8000476:	f44f 0c10 	mov.w	ip, #9437184	; 0x900000
 800047a:	fa2c f404 	lsr.w	r4, ip, r4
 800047e:	fa06 f404 	lsl.w	r4, r6, r4
 8000482:	ea2e 0404 	bic.w	r4, lr, r4
 8000486:	fab8 f888 	clz	r8, r8
 800048a:	fa2c fc08 	lsr.w	ip, ip, r8
 800048e:	fa05 fc0c 	lsl.w	ip, r5, ip
 8000492:	ea44 040c 	orr.w	r4, r4, ip
 8000496:	f841 4027 	str.w	r4, [r1, r7, lsl #2]
 800049a:	fa90 f7a0 	rbit	r7, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800049e:	fab7 f787 	clz	r7, r7
 80004a2:	fa20 f707 	lsr.w	r7, r0, r7
  MODIFY_REG(*preg,
 80004a6:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 80004aa:	fa93 f4a3 	rbit	r4, r3
 80004ae:	fab4 f484 	clz	r4, r4
 80004b2:	fa93 f8a3 	rbit	r8, r3
 80004b6:	b2e4      	uxtb	r4, r4
 80004b8:	f44f 0c40 	mov.w	ip, #12582912	; 0xc00000
 80004bc:	fa2c f404 	lsr.w	r4, ip, r4
 80004c0:	fa06 f404 	lsl.w	r4, r6, r4
 80004c4:	ea2e 0404 	bic.w	r4, lr, r4
 80004c8:	fab8 f888 	clz	r8, r8
 80004cc:	fa2c fc08 	lsr.w	ip, ip, r8
 80004d0:	fa05 fc0c 	lsl.w	ip, r5, ip
 80004d4:	ea44 040c 	orr.w	r4, r4, ip
 80004d8:	f841 4027 	str.w	r4, [r1, r7, lsl #2]
 80004dc:	fa90 f7a0 	rbit	r7, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80004e0:	fab7 f787 	clz	r7, r7
 80004e4:	fa20 f707 	lsr.w	r7, r0, r7
  MODIFY_REG(*preg,
 80004e8:	f851 e027 	ldr.w	lr, [r1, r7, lsl #2]
 80004ec:	fa93 f4a3 	rbit	r4, r3
 80004f0:	fab4 f484 	clz	r4, r4
 80004f4:	fa93 f8a3 	rbit	r8, r3
 80004f8:	b2e4      	uxtb	r4, r4
 80004fa:	f44f 0c70 	mov.w	ip, #15728640	; 0xf00000
 80004fe:	fa2c f404 	lsr.w	r4, ip, r4
 8000502:	fa06 f404 	lsl.w	r4, r6, r4
 8000506:	ea2e 0404 	bic.w	r4, lr, r4
 800050a:	fab8 f888 	clz	r8, r8
 800050e:	fa2c fc08 	lsr.w	ip, ip, r8
 8000512:	fa05 fc0c 	lsl.w	ip, r5, ip
 8000516:	ea44 040c 	orr.w	r4, r4, ip
 800051a:	f841 4027 	str.w	r4, [r1, r7, lsl #2]
 800051e:	fa90 f4a0 	rbit	r4, r0
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000522:	fab4 f484 	clz	r4, r4
 8000526:	40e0      	lsrs	r0, r4
  MODIFY_REG(*preg,
 8000528:	f851 7020 	ldr.w	r7, [r1, r0, lsl #2]
 800052c:	fa93 f4a3 	rbit	r4, r3
 8000530:	fab4 f484 	clz	r4, r4
 8000534:	fa93 f3a3 	rbit	r3, r3
 8000538:	b2e4      	uxtb	r4, r4
 800053a:	f04f 7c90 	mov.w	ip, #18874368	; 0x1200000
 800053e:	fa2c f404 	lsr.w	r4, ip, r4
 8000542:	40a6      	lsls	r6, r4
 8000544:	ea27 0606 	bic.w	r6, r7, r6
 8000548:	fab3 f383 	clz	r3, r3
 800054c:	fa2c f303 	lsr.w	r3, ip, r3
 8000550:	409d      	lsls	r5, r3
 8000552:	4335      	orrs	r5, r6
 8000554:	f841 5020 	str.w	r5, [r1, r0, lsl #2]
{
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, ADC_CR1_EOCIE);
 8000558:	6853      	ldr	r3, [r2, #4]
 800055a:	f043 0320 	orr.w	r3, r3, #32
 800055e:	6053      	str	r3, [r2, #4]
    LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_6, LL_ADC_SAMPLINGTIME_41CYCLES_5);

  /*## Configuration of ADC interruptions ####################################*/
  /* Enable interruption ADC group regular end of sequence conversions */
  LL_ADC_EnableIT_EOS(ADC1);
}
 8000560:	b002      	add	sp, #8
 8000562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000566:	bf00      	nop
 8000568:	40010800 	.word	0x40010800
 800056c:	e000e100 	.word	0xe000e100
 8000570:	40021000 	.word	0x40021000
 8000574:	40012400 	.word	0x40012400
 8000578:	4001242c 	.word	0x4001242c
 800057c:	4001240c 	.word	0x4001240c

08000580 <ADC_Activate>:
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8000580:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <ADC_Activate+0x30>)
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	f042 0201 	orr.w	r2, r2, #1
 8000588:	609a      	str	r2, [r3, #8]
void ADC_Activate(void)
{
    /* Enable ADC */
    LL_ADC_Enable(ADC1);

    NOP8;
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	bf00      	nop
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800059a:	689a      	ldr	r2, [r3, #8]
 800059c:	f042 0204 	orr.w	r2, r2, #4
 80005a0:	609a      	str	r2, [r3, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 80005a2:	461a      	mov	r2, r3
 80005a4:	6893      	ldr	r3, [r2, #8]

    /* Run ADC self calibration */
    LL_ADC_StartCalibration(ADC1);

    while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0)
 80005a6:	f013 0f04 	tst.w	r3, #4
 80005aa:	d1fb      	bne.n	80005a4 <ADC_Activate+0x24>
    {
    };
}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	40012400 	.word	0x40012400

080005b4 <InitRoutine>:
{
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	b082      	sub	sp, #8
  SET_BIT(RCC->APB2ENR, Periphs);
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <InitRoutine+0x6c>)
 80005ba:	699a      	ldr	r2, [r3, #24]
 80005bc:	f042 0204 	orr.w	r2, r2, #4
 80005c0:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005c2:	699a      	ldr	r2, [r3, #24]
 80005c4:	f002 0204 	and.w	r2, r2, #4
 80005c8:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80005ca:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80005cc:	699a      	ldr	r2, [r3, #24]
 80005ce:	f042 0208 	orr.w	r2, r2, #8
 80005d2:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0308 	and.w	r3, r3, #8
 80005da:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80005dc:	9b00      	ldr	r3, [sp, #0]
	tConfigBottomConnection.Pin = BOTTOM_PINS;
 80005de:	4911      	ldr	r1, [pc, #68]	; (8000624 <InitRoutine+0x70>)
 80005e0:	4b11      	ldr	r3, [pc, #68]	; (8000628 <InitRoutine+0x74>)
 80005e2:	600b      	str	r3, [r1, #0]
	tConfigBottomConnection.Mode = LL_GPIO_MODE_OUTPUT;
 80005e4:	2601      	movs	r6, #1
 80005e6:	604e      	str	r6, [r1, #4]
	tConfigBottomConnection.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005e8:	2502      	movs	r5, #2
 80005ea:	608d      	str	r5, [r1, #8]
	tConfigBottomConnection.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005ec:	2400      	movs	r4, #0
 80005ee:	60cc      	str	r4, [r1, #12]
	tConfigBottomConnection.Pull = LL_GPIO_PULL_DOWN;
 80005f0:	610c      	str	r4, [r1, #16]
	LL_GPIO_Init(BOTTOM_PORT, &tConfigBottomConnection);
 80005f2:	480e      	ldr	r0, [pc, #56]	; (800062c <InitRoutine+0x78>)
 80005f4:	f000 f894 	bl	8000720 <LL_GPIO_Init>
	tConfigTOPConnection.Pin = TOP_PINS;
 80005f8:	490d      	ldr	r1, [pc, #52]	; (8000630 <InitRoutine+0x7c>)
 80005fa:	f64f 63fe 	movw	r3, #65278	; 0xfefe
 80005fe:	600b      	str	r3, [r1, #0]
	tConfigTOPConnection.Mode = LL_GPIO_MODE_OUTPUT;
 8000600:	604e      	str	r6, [r1, #4]
	tConfigTOPConnection.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000602:	608d      	str	r5, [r1, #8]
	tConfigTOPConnection.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000604:	60cc      	str	r4, [r1, #12]
	tConfigTOPConnection.Pull = LL_GPIO_PULL_DOWN;
 8000606:	610c      	str	r4, [r1, #16]
	LL_GPIO_Init(TOP_PORT, &tConfigTOPConnection);
 8000608:	480a      	ldr	r0, [pc, #40]	; (8000634 <InitRoutine+0x80>)
 800060a:	f000 f889 	bl	8000720 <LL_GPIO_Init>
	DMA_Init();
 800060e:	f7ff fe0d 	bl	800022c <DMA_Init>
	ADC_Init();
 8000612:	f7ff fe4b 	bl	80002ac <ADC_Init>
	ADC_Activate();
 8000616:	f7ff ffb3 	bl	8000580 <ADC_Activate>
}
 800061a:	b002      	add	sp, #8
 800061c:	bd70      	pop	{r4, r5, r6, pc}
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000
 8000624:	20000024 	.word	0x20000024
 8000628:	04740777 	.word	0x04740777
 800062c:	40010c00 	.word	0x40010c00
 8000630:	20000038 	.word	0x20000038
 8000634:	40010800 	.word	0x40010800

08000638 <DMA_TransferComplete_Callback>:

void DMA_TransferComplete_Callback(void)
{
	eDMA_ADCtransferStatus = DMA_TransferComplete;
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <DMA_TransferComplete_Callback+0x8>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
}
 800063e:	4770      	bx	lr
 8000640:	20000020 	.word	0x20000020

08000644 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <SystemInit+0x40>)
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	f042 0201 	orr.w	r2, r2, #1
 800064c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800064e:	6859      	ldr	r1, [r3, #4]
 8000650:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <SystemInit+0x44>)
 8000652:	400a      	ands	r2, r1
 8000654:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800065c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000660:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000668:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000670:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000672:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000676:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <SystemInit+0x48>)
 800067a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800067e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	f8ff0000 	.word	0xf8ff0000
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <Init_Clock>:
 * @brief Initialization of SystemClock source and 1ms SysTick.
 * @param None
 * @retval None
 */
void Init_Clock(void)
{
 8000690:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000692:	4b0a      	ldr	r3, [pc, #40]	; (80006bc <Init_Clock+0x2c>)
 8000694:	685a      	ldr	r2, [r3, #4]
 8000696:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800069a:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800069c:	685a      	ldr	r2, [r3, #4]
 800069e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80006a2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 80006aa:	605a      	str	r2, [r3, #4]
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

	/* 1ms config with HSI 8MHz*/
	LL_Init1msTick(8000000);//HSI_VALUE);
 80006ac:	4c04      	ldr	r4, [pc, #16]	; (80006c0 <Init_Clock+0x30>)
 80006ae:	4620      	mov	r0, r4
 80006b0:	f000 f8b8 	bl	8000824 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 80006b4:	4620      	mov	r0, r4
 80006b6:	f000 f8df 	bl	8000878 <LL_SetSystemCoreClock>
}
 80006ba:	bd10      	pop	{r4, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	007a1200 	.word	0x007a1200

080006c4 <main>:
{
 80006c4:	b508      	push	{r3, lr}
 	Init_Clock();
 80006c6:	f7ff ffe3 	bl	8000690 <Init_Clock>
 	InitRoutine();
 80006ca:	f7ff ff73 	bl	80005b4 <InitRoutine>
		LL_mDelay(100);
 80006ce:	2464      	movs	r4, #100	; 0x64
		ChargeRoutine();
 80006d0:	f7ff fd3c 	bl	800014c <ChargeRoutine>
		LL_mDelay(100);
 80006d4:	4620      	mov	r0, r4
 80006d6:	f000 f8b5 	bl	8000844 <LL_mDelay>
 80006da:	e7f9      	b.n	80006d0 <main+0xc>

080006dc <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80006dc:	4770      	bx	lr

080006de <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80006de:	e7fe      	b.n	80006de <HardFault_Handler>

080006e0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler>

080006e2 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler>

080006e4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler>

080006e6 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 80006e6:	4770      	bx	lr

080006e8 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 80006e8:	4770      	bx	lr

080006ea <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 80006ea:	4770      	bx	lr

080006ec <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
	//IncrementTicks_CallBack();
}
 80006ec:	4770      	bx	lr

080006ee <ADC1_2_IRQHandler>:
  * @param  None
  * @retval None
  */
void ADC1_IRQHandler(void)
{
}
 80006ee:	4770      	bx	lr

080006f0 <DMA1_Channel1_IRQHandler>:
  * @brief  This function handles DMA1 interrupt request.
  * @param  None
  * @retval None
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006f0:	b508      	push	{r3, lr}
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <DMA1_Channel1_IRQHandler+0x2c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
  /* Check whether DMA transfer complete caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 80006f6:	f013 0f02 	tst.w	r3, #2
 80006fa:	d108      	bne.n	800070e <DMA1_Channel1_IRQHandler+0x1e>
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <DMA1_Channel1_IRQHandler+0x2c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
    LL_DMA_ClearFlag_GI1(DMA1);
    DMA_TransferComplete_Callback();
  }

  /* Check whether DMA transfer error caused the DMA interruption */
  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 8000700:	f013 0f08 	tst.w	r3, #8
 8000704:	d002      	beq.n	800070c <DMA1_Channel1_IRQHandler+0x1c>
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <DMA1_Channel1_IRQHandler+0x2c>)
 8000708:	2208      	movs	r2, #8
 800070a:	605a      	str	r2, [r3, #4]
  {
    /* Clear flag DMA transfer error */
    LL_DMA_ClearFlag_TE1(DMA1);
  }
}
 800070c:	bd08      	pop	{r3, pc}
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 800070e:	4b03      	ldr	r3, [pc, #12]	; (800071c <DMA1_Channel1_IRQHandler+0x2c>)
 8000710:	2201      	movs	r2, #1
 8000712:	605a      	str	r2, [r3, #4]
    DMA_TransferComplete_Callback();
 8000714:	f7ff ff90 	bl	8000638 <DMA_TransferComplete_Callback>
 8000718:	e7f0      	b.n	80006fc <DMA1_Channel1_IRQHandler+0xc>
 800071a:	bf00      	nop
 800071c:	40020000 	.word	0x40020000

08000720 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000724:	680e      	ldr	r6, [r1, #0]
 8000726:	f3c6 260f 	ubfx	r6, r6, #8, #16
 800072a:	fa96 f5a6 	rbit	r5, r6
  pinpos = POSITION_VAL(pinmask);
 800072e:	fab5 f585 	clz	r5, r5

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000732:	fa36 f305 	lsrs.w	r3, r6, r5
 8000736:	d071      	beq.n	800081c <LL_GPIO_Init+0xfc>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000738:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800073c:	f04f 0e0f 	mov.w	lr, #15
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8000740:	f04f 0803 	mov.w	r8, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000744:	f04f 0904 	mov.w	r9, #4
 8000748:	e034      	b.n	80007b4 <LL_GPIO_Init+0x94>
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800074a:	f1a5 0308 	sub.w	r3, r5, #8
 800074e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 800075a:	0e1f      	lsrs	r7, r3, #24
 800075c:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000760:	fab2 f282 	clz	r2, r2
 8000764:	fa93 f4a3 	rbit	r4, r3
 8000768:	0092      	lsls	r2, r2, #2
 800076a:	fa0e fa02 	lsl.w	sl, lr, r2
 800076e:	59c2      	ldr	r2, [r0, r7]
 8000770:	ea22 0a0a 	bic.w	sl, r2, sl
 8000774:	fab4 f484 	clz	r4, r4
 8000778:	00a4      	lsls	r4, r4, #2
 800077a:	684a      	ldr	r2, [r1, #4]
 800077c:	fa02 f404 	lsl.w	r4, r2, r4
 8000780:	ea4a 0204 	orr.w	r2, sl, r4
 8000784:	51c2      	str	r2, [r0, r7]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000786:	68c4      	ldr	r4, [r0, #12]
 8000788:	ea4f 2a13 	mov.w	sl, r3, lsr #8
 800078c:	fa9a f2aa 	rbit	r2, sl
 8000790:	fab2 fb82 	clz	fp, r2
 8000794:	690a      	ldr	r2, [r1, #16]
 8000796:	fa02 f20b 	lsl.w	r2, r2, fp
 800079a:	ea24 040a 	bic.w	r4, r4, sl
 800079e:	4322      	orrs	r2, r4
 80007a0:	60c2      	str	r2, [r0, #12]
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80007a2:	684a      	ldr	r2, [r1, #4]
 80007a4:	f022 0208 	bic.w	r2, r2, #8
 80007a8:	2a01      	cmp	r2, #1
 80007aa:	d00d      	beq.n	80007c8 <LL_GPIO_Init+0xa8>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 80007ac:	3501      	adds	r5, #1
  while ((pinmask  >> pinpos) != 0u)
 80007ae:	fa36 f305 	lsrs.w	r3, r6, r5
 80007b2:	d033      	beq.n	800081c <LL_GPIO_Init+0xfc>
    if ((pinmask & (1u << pinpos)) != 0u)
 80007b4:	fa0c f305 	lsl.w	r3, ip, r5
 80007b8:	4233      	tst	r3, r6
 80007ba:	d0f7      	beq.n	80007ac <LL_GPIO_Init+0x8c>
      if (pinpos < GPIO_PIN_MASK_POS)
 80007bc:	2d07      	cmp	r5, #7
 80007be:	d8c4      	bhi.n	800074a <LL_GPIO_Init+0x2a>
        currentpin = (0x00000101uL << pinpos);
 80007c0:	f240 1301 	movw	r3, #257	; 0x101
 80007c4:	40ab      	lsls	r3, r5
 80007c6:	e7c8      	b.n	800075a <LL_GPIO_Init+0x3a>
 80007c8:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80007cc:	fab2 f282 	clz	r2, r2
 80007d0:	fa93 faa3 	rbit	sl, r3
 80007d4:	0092      	lsls	r2, r2, #2
 80007d6:	fa08 f202 	lsl.w	r2, r8, r2
 80007da:	59c4      	ldr	r4, [r0, r7]
 80007dc:	ea24 0202 	bic.w	r2, r4, r2
 80007e0:	faba fa8a 	clz	sl, sl
 80007e4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 80007e8:	688c      	ldr	r4, [r1, #8]
 80007ea:	fa04 fa0a 	lsl.w	sl, r4, sl
 80007ee:	ea42 020a 	orr.w	r2, r2, sl
 80007f2:	51c2      	str	r2, [r0, r7]
 80007f4:	fa93 f4a3 	rbit	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80007f8:	fab4 f484 	clz	r4, r4
 80007fc:	fa93 f3a3 	rbit	r3, r3
 8000800:	00a4      	lsls	r4, r4, #2
 8000802:	fa09 f404 	lsl.w	r4, r9, r4
 8000806:	ea22 0204 	bic.w	r2, r2, r4
 800080a:	fab3 f383 	clz	r3, r3
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	68cc      	ldr	r4, [r1, #12]
 8000812:	fa04 f303 	lsl.w	r3, r4, r3
 8000816:	431a      	orrs	r2, r3
 8000818:	51c2      	str	r2, [r0, r7]
 800081a:	e7c7      	b.n	80007ac <LL_GPIO_Init+0x8c>
  }
  return (SUCCESS);
}
 800081c:	2000      	movs	r0, #0
 800081e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000824 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <LL_Init1msTick+0x18>)
 8000826:	fba3 3000 	umull	r3, r0, r3, r0
 800082a:	0980      	lsrs	r0, r0, #6
 800082c:	3801      	subs	r0, #1
 800082e:	4b04      	ldr	r3, [pc, #16]	; (8000840 <LL_Init1msTick+0x1c>)
 8000830:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	2207      	movs	r2, #7
 8000838:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 800083a:	4770      	bx	lr
 800083c:	10624dd3 	.word	0x10624dd3
 8000840:	e000e010 	.word	0xe000e010

08000844 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000844:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <LL_mDelay+0x30>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800084c:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800084e:	f1b0 3fff 	cmp.w	r0, #4294967295
  {
    Delay++;
 8000852:	bf18      	it	ne
 8000854:	3001      	addne	r0, #1
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <LL_mDelay+0x30>)
  while (Delay)
 8000858:	b148      	cbz	r0, 800086e <LL_mDelay+0x2a>
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800085a:	6813      	ldr	r3, [r2, #0]
 800085c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000860:	d103      	bne.n	800086a <LL_mDelay+0x26>
 8000862:	6813      	ldr	r3, [r2, #0]
 8000864:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000868:	d0fb      	beq.n	8000862 <LL_mDelay+0x1e>
    {
      Delay--;
 800086a:	3801      	subs	r0, #1
 800086c:	e7f4      	b.n	8000858 <LL_mDelay+0x14>
    }
  }
}
 800086e:	b002      	add	sp, #8
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <LL_SetSystemCoreClock>:
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000878:	4b01      	ldr	r3, [pc, #4]	; (8000880 <LL_SetSystemCoreClock+0x8>)
 800087a:	6018      	str	r0, [r3, #0]
}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000

08000884 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000884:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000886:	e003      	b.n	8000890 <LoopCopyDataInit>

08000888 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800088a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800088c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800088e:	3104      	adds	r1, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000894:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000896:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000898:	d3f6      	bcc.n	8000888 <CopyDataInit>
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800089c:	e002      	b.n	80008a4 <LoopFillZerobss>

0800089e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008a0:	f842 3b04 	str.w	r3, [r2], #4

080008a4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008a6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80008a8:	d3f9      	bcc.n	800089e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008aa:	f7ff fecb 	bl	8000644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ae:	f000 f80f 	bl	80008d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008b2:	f7ff ff07 	bl	80006c4 <main>
  bx lr
 80008b6:	4770      	bx	lr
  ldr r3, =_sidata
 80008b8:	08000938 	.word	0x08000938
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80008c0:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80008c4:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80008c8:	20000058 	.word	0x20000058

080008cc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <CAN1_RX1_IRQHandler>
	...

080008d0 <__libc_init_array>:
 80008d0:	b570      	push	{r4, r5, r6, lr}
 80008d2:	2500      	movs	r5, #0
 80008d4:	4e0c      	ldr	r6, [pc, #48]	; (8000908 <__libc_init_array+0x38>)
 80008d6:	4c0d      	ldr	r4, [pc, #52]	; (800090c <__libc_init_array+0x3c>)
 80008d8:	1ba4      	subs	r4, r4, r6
 80008da:	10a4      	asrs	r4, r4, #2
 80008dc:	42a5      	cmp	r5, r4
 80008de:	d109      	bne.n	80008f4 <__libc_init_array+0x24>
 80008e0:	f000 f81a 	bl	8000918 <_init>
 80008e4:	2500      	movs	r5, #0
 80008e6:	4e0a      	ldr	r6, [pc, #40]	; (8000910 <__libc_init_array+0x40>)
 80008e8:	4c0a      	ldr	r4, [pc, #40]	; (8000914 <__libc_init_array+0x44>)
 80008ea:	1ba4      	subs	r4, r4, r6
 80008ec:	10a4      	asrs	r4, r4, #2
 80008ee:	42a5      	cmp	r5, r4
 80008f0:	d105      	bne.n	80008fe <__libc_init_array+0x2e>
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008f8:	4798      	blx	r3
 80008fa:	3501      	adds	r5, #1
 80008fc:	e7ee      	b.n	80008dc <__libc_init_array+0xc>
 80008fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000902:	4798      	blx	r3
 8000904:	3501      	adds	r5, #1
 8000906:	e7f2      	b.n	80008ee <__libc_init_array+0x1e>
 8000908:	08000930 	.word	0x08000930
 800090c:	08000930 	.word	0x08000930
 8000910:	08000930 	.word	0x08000930
 8000914:	08000934 	.word	0x08000934

08000918 <_init>:
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091a:	bf00      	nop
 800091c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800091e:	bc08      	pop	{r3}
 8000920:	469e      	mov	lr, r3
 8000922:	4770      	bx	lr

08000924 <_fini>:
 8000924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000926:	bf00      	nop
 8000928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800092a:	bc08      	pop	{r3}
 800092c:	469e      	mov	lr, r3
 800092e:	4770      	bx	lr
