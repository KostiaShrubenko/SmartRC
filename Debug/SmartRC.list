
SmartRC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000464  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000570  08000578  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000570  08000570  00010578  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00010578  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000578  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000574  08000574  00010574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  20000000  08000578  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000578  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010578  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002082  00000000  00000000  000105a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000aa0  00000000  00000000  00012623  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b1a  00000000  00000000  000130c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000188  00000000  00000000  00013be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000198  00000000  00000000  00013d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00010e21  00000000  00000000  00013f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000020fd  00000000  00000000  00024d21  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0005830c  00000000  00000000  00026e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0007f12a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002b0  00000000  00000000  0007f1a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000558 	.word	0x08000558

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000558 	.word	0x08000558

0800014c <InitRoutine>:

static LL_GPIO_InitTypeDef tConfigTOPConnection;
static LL_GPIO_InitTypeDef tConfigBottomConnection;

void InitRoutine(void)
{
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000150:	4b16      	ldr	r3, [pc, #88]	; (80001ac <InitRoutine+0x60>)
 8000152:	699a      	ldr	r2, [r3, #24]
 8000154:	f042 0204 	orr.w	r2, r2, #4
 8000158:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800015a:	699a      	ldr	r2, [r3, #24]
 800015c:	f002 0204 	and.w	r2, r2, #4
 8000160:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000162:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000164:	699a      	ldr	r2, [r3, #24]
 8000166:	f042 0208 	orr.w	r2, r2, #8
 800016a:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800016c:	699b      	ldr	r3, [r3, #24]
 800016e:	f003 0308 	and.w	r3, r3, #8
 8000172:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000174:	9b00      	ldr	r3, [sp, #0]
	TOP_CLK_ENABLE();
	BOTTOM_CLK_ENABLE();

	tConfigBottomConnection.Pin = BOTTOM_PINS;
 8000176:	490e      	ldr	r1, [pc, #56]	; (80001b0 <InitRoutine+0x64>)
 8000178:	4b0e      	ldr	r3, [pc, #56]	; (80001b4 <InitRoutine+0x68>)
 800017a:	600b      	str	r3, [r1, #0]
	tConfigBottomConnection.Mode = LL_GPIO_MODE_OUTPUT;
 800017c:	2601      	movs	r6, #1
 800017e:	604e      	str	r6, [r1, #4]
	tConfigBottomConnection.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000180:	2502      	movs	r5, #2
 8000182:	608d      	str	r5, [r1, #8]
	tConfigBottomConnection.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000184:	2400      	movs	r4, #0
 8000186:	60cc      	str	r4, [r1, #12]
	tConfigBottomConnection.Pull = LL_GPIO_PULL_DOWN;
 8000188:	610c      	str	r4, [r1, #16]
	LL_GPIO_Init(BOTTOM_PORT, &tConfigBottomConnection);
 800018a:	480b      	ldr	r0, [pc, #44]	; (80001b8 <InitRoutine+0x6c>)
 800018c:	f000 f8ef 	bl	800036e <LL_GPIO_Init>

	tConfigTOPConnection.Pin = TOP_PINS;
 8000190:	490a      	ldr	r1, [pc, #40]	; (80001bc <InitRoutine+0x70>)
 8000192:	f647 637e 	movw	r3, #32382	; 0x7e7e
 8000196:	600b      	str	r3, [r1, #0]
	tConfigTOPConnection.Mode = LL_GPIO_MODE_OUTPUT;
 8000198:	604e      	str	r6, [r1, #4]
	tConfigTOPConnection.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800019a:	608d      	str	r5, [r1, #8]
	tConfigTOPConnection.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800019c:	60cc      	str	r4, [r1, #12]
	tConfigTOPConnection.Pull = LL_GPIO_PULL_DOWN;
 800019e:	610c      	str	r4, [r1, #16]
	LL_GPIO_Init(TOP_PORT, &tConfigTOPConnection);
 80001a0:	4807      	ldr	r0, [pc, #28]	; (80001c0 <InitRoutine+0x74>)
 80001a2:	f000 f8e4 	bl	800036e <LL_GPIO_Init>
}
 80001a6:	b002      	add	sp, #8
 80001a8:	bd70      	pop	{r4, r5, r6, pc}
 80001aa:	bf00      	nop
 80001ac:	40021000 	.word	0x40021000
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	04700777 	.word	0x04700777
 80001b8:	40010c00 	.word	0x40010c00
 80001bc:	20000030 	.word	0x20000030
 80001c0:	40010800 	.word	0x40010800

080001c4 <ChargeRoutine>:

void ChargeRoutine(void)
{
 80001c4:	b430      	push	{r4, r5}
 80001c6:	204b      	movs	r0, #75	; 0x4b
	for (uint16_t i = 0; i < 75; i++)
	{
		//BOTTOM_PORT->CRL = (BOTTOM_PORT->CRL & (~(BOTTOM_CONFIG_MASK))) | BOTTOM_MODE_FLOAT;
		MODIFY_REG(BOTTOM_PORT->CRL, BOTTOM_CONFIG_MASK, BOTTOM_MODE_FLOAT);
 80001c8:	493e      	ldr	r1, [pc, #248]	; (80002c4 <ChargeRoutine+0x100>)
		//tConfigBottomConnection.Mode = LL_GPIO_MODE_FLOATING;
		//LL_GPIO_Init(BOTTOM_CONNECTION_PORT, &tConfigBottomConnection);
		//TOP_PORT->CRL = (TOP_PORT->CRL & (~(TOP_CONFIG_MASK))) | TOP_MODE_OUTPUT;
		MODIFY_REG(TOP_PORT->CRL, TOP_CONFIG_MASK, TOP_MODE_OUTPUT);
 80001ca:	4a3f      	ldr	r2, [pc, #252]	; (80002c8 <ChargeRoutine+0x104>)
  * @param  PortValue Level value for each pin of the port
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_WriteOutputPort(GPIO_TypeDef *GPIOx, uint32_t PortValue)
{
  WRITE_REG(GPIOx->ODR, PortValue);
 80001cc:	257e      	movs	r5, #126	; 0x7e
 80001ce:	2400      	movs	r4, #0
		MODIFY_REG(BOTTOM_PORT->CRL, BOTTOM_CONFIG_MASK, BOTTOM_MODE_FLOAT);
 80001d0:	680b      	ldr	r3, [r1, #0]
 80001d2:	f023 030f 	bic.w	r3, r3, #15
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	600b      	str	r3, [r1, #0]
		MODIFY_REG(TOP_PORT->CRL, TOP_CONFIG_MASK, TOP_MODE_OUTPUT);
 80001dc:	6813      	ldr	r3, [r2, #0]
 80001de:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80001e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80001e6:	6013      	str	r3, [r2, #0]
 80001e8:	60d5      	str	r5, [r2, #12]
		//tConfigTOPConnection.Mode = LL_GPIO_MODE_OUTPUT;
		//LL_GPIO_Init(TOP_CONNECTION_PORT, &tConfigTOPConnection);
		LL_GPIO_WriteOutputPort(TOP_PORT, TOP_HIGH_LEVEL);

		NOP8;
 80001ea:	bf00      	nop
 80001ec:	bf00      	nop
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	bf00      	nop
 80001f8:	bf00      	nop
		//LL_GPIO_WriteOutputPort(TOP_PORT, TOP_LOW_LEVEL);
		//TOP_PORT->CRL = (TOP_PORT->CRL & (~(TOP_CONFIG_MASK))) | TOP_MODE_FLOAT;
		MODIFY_REG(TOP_PORT->CRL, TOP_CONFIG_MASK, TOP_MODE_FLOAT);
 80001fa:	6813      	ldr	r3, [r2, #0]
 80001fc:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000200:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000204:	6013      	str	r3, [r2, #0]
		//tConfigTOPConnection.Mode = LL_GPIO_MODE_FLOATING;
		//LL_GPIO_Init(TOP_CONNECTION_PORT, &tConfigTOPConnection);

		//BOTTOM_PORT->CRL = (BOTTOM_PORT->CRL & (~(BOTTOM_CONFIG_MASK))) | BOTTOM_MODE_OUTPUT;
		MODIFY_REG(BOTTOM_PORT->CRL, BOTTOM_CONFIG_MASK, BOTTOM_MODE_OUTPUT);
 8000206:	680b      	ldr	r3, [r1, #0]
 8000208:	f023 030f 	bic.w	r3, r3, #15
 800020c:	f043 0302 	orr.w	r3, r3, #2
 8000210:	600b      	str	r3, [r1, #0]
 8000212:	60cc      	str	r4, [r1, #12]
		//tConfigBottomConnection.Mode = LL_GPIO_MODE_OUTPUT;
		//LL_GPIO_Init(BOTTOM_CONNECTION_PORT, &tConfigBottomConnection);
		LL_GPIO_WriteOutputPort(BOTTOM_PORT, BOTTOM_LOW_LEVEL);
		NOP8;
 8000214:	bf00      	nop
 8000216:	bf00      	nop
 8000218:	bf00      	nop
 800021a:	bf00      	nop
 800021c:	bf00      	nop
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	bf00      	nop
 8000224:	3801      	subs	r0, #1
 8000226:	b280      	uxth	r0, r0
	for (uint16_t i = 0; i < 75; i++)
 8000228:	2800      	cmp	r0, #0
 800022a:	d1d1      	bne.n	80001d0 <ChargeRoutine+0xc>
	}
	NOP64;
 800022c:	bf00      	nop
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	bf00      	nop
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	bf00      	nop
 8000240:	bf00      	nop
 8000242:	bf00      	nop
 8000244:	bf00      	nop
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	bf00      	nop
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	bf00      	nop
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	bf00      	nop
 8000272:	bf00      	nop
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	bf00      	nop
	MODIFY_REG(TOP_PORT->CRL, TOP_CONFIG_MASK, TOP_MODE_OUTPUT);
 80002ac:	4a06      	ldr	r2, [pc, #24]	; (80002c8 <ChargeRoutine+0x104>)
 80002ae:	6813      	ldr	r3, [r2, #0]
 80002b0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80002b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002b8:	6013      	str	r3, [r2, #0]
 80002ba:	2300      	movs	r3, #0
 80002bc:	60d3      	str	r3, [r2, #12]
	LL_GPIO_WriteOutputPort(TOP_PORT, TOP_LOW_LEVEL);
	//LL_GPIO_WriteOutputPort(TOP_CONNECTION_PORT, TOP_CONNECTION_LOW_LEVEL);
}
 80002be:	bc30      	pop	{r4, r5}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	40010800 	.word	0x40010800

080002cc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <SystemInit+0x40>)
 80002ce:	681a      	ldr	r2, [r3, #0]
 80002d0:	f042 0201 	orr.w	r2, r2, #1
 80002d4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80002d6:	6859      	ldr	r1, [r3, #4]
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <SystemInit+0x44>)
 80002da:	400a      	ands	r2, r1
 80002dc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80002de:	681a      	ldr	r2, [r3, #0]
 80002e0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80002e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80002e8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80002ea:	681a      	ldr	r2, [r3, #0]
 80002ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80002f0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80002f8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80002fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80002fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000300:	4b04      	ldr	r3, [pc, #16]	; (8000314 <SystemInit+0x48>)
 8000302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000306:	609a      	str	r2, [r3, #8]
#endif 
}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000
 8000310:	f8ff0000 	.word	0xf8ff0000
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <Init_Clock>:
 * @brief Initialization of SystemClock source and 1ms SysTick.
 * @param None
 * @retval None
 */
void Init_Clock(void)
{
 8000318:	b508      	push	{r3, lr}
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <Init_Clock+0x24>)
 800031c:	685a      	ldr	r2, [r3, #4]
 800031e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000322:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000324:	685a      	ldr	r2, [r3, #4]
 8000326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800032a:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800032c:	685a      	ldr	r2, [r3, #4]
 800032e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000332:	605a      	str	r2, [r3, #4]
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

	/* 1ms config with HSI 8MHz*/
	LL_Init1msTick(8000000);//HSI_VALUE);
 8000334:	4802      	ldr	r0, [pc, #8]	; (8000340 <Init_Clock+0x28>)
 8000336:	f000 f89b 	bl	8000470 <LL_Init1msTick>
//	LL_SetSystemCoreClock(8000000);
}
 800033a:	bd08      	pop	{r3, pc}
 800033c:	40021000 	.word	0x40021000
 8000340:	007a1200 	.word	0x007a1200

08000344 <main>:
{
 8000344:	b508      	push	{r3, lr}
 	Init_Clock();
 8000346:	f7ff ffe7 	bl	8000318 <Init_Clock>
 	InitRoutine();
 800034a:	f7ff feff 	bl	800014c <InitRoutine>
		LL_mDelay(100);
 800034e:	2464      	movs	r4, #100	; 0x64
		ChargeRoutine();
 8000350:	f7ff ff38 	bl	80001c4 <ChargeRoutine>
		LL_mDelay(100);
 8000354:	4620      	mov	r0, r4
 8000356:	f000 f89b 	bl	8000490 <LL_mDelay>
 800035a:	e7f9      	b.n	8000350 <main+0xc>

0800035c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800035c:	4770      	bx	lr

0800035e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800035e:	e7fe      	b.n	800035e <HardFault_Handler>

08000360 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000360:	e7fe      	b.n	8000360 <MemManage_Handler>

08000362 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000362:	e7fe      	b.n	8000362 <BusFault_Handler>

08000364 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000364:	e7fe      	b.n	8000364 <UsageFault_Handler>

08000366 <SVC_Handler>:
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
}
 8000366:	4770      	bx	lr

08000368 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8000368:	4770      	bx	lr

0800036a <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 800036a:	4770      	bx	lr

0800036c <SysTick_Handler>:
  * @retval None
  */
void SysTick_Handler(void)
{
	//IncrementTicks_CallBack();
}
 800036c:	4770      	bx	lr

0800036e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800036e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8000372:	680e      	ldr	r6, [r1, #0]
 8000374:	f3c6 260f 	ubfx	r6, r6, #8, #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000378:	fa96 f5a6 	rbit	r5, r6
  pinpos = POSITION_VAL(pinmask);
 800037c:	fab5 f585 	clz	r5, r5

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8000380:	fa36 f305 	lsrs.w	r3, r6, r5
 8000384:	d071      	beq.n	800046a <LL_GPIO_Init+0xfc>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8000386:	f04f 0c01 	mov.w	ip, #1
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 800038a:	f04f 0e0f 	mov.w	lr, #15
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800038e:	f04f 0803 	mov.w	r8, #3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000392:	f04f 0904 	mov.w	r9, #4
 8000396:	e034      	b.n	8000402 <LL_GPIO_Init+0x94>
      {
        currentpin = (0x00000101uL << pinpos);
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000398:	f1a5 0308 	sub.w	r3, r5, #8
 800039c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80003a0:	fa02 f303 	lsl.w	r3, r2, r3
 80003a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80003a8:	0e1f      	lsrs	r7, r3, #24
 80003aa:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80003ae:	fab2 f282 	clz	r2, r2
 80003b2:	fa93 f4a3 	rbit	r4, r3
 80003b6:	0092      	lsls	r2, r2, #2
 80003b8:	fa0e fa02 	lsl.w	sl, lr, r2
 80003bc:	59c2      	ldr	r2, [r0, r7]
 80003be:	ea22 0a0a 	bic.w	sl, r2, sl
 80003c2:	fab4 f484 	clz	r4, r4
 80003c6:	00a4      	lsls	r4, r4, #2
 80003c8:	684a      	ldr	r2, [r1, #4]
 80003ca:	fa02 f404 	lsl.w	r4, r2, r4
 80003ce:	ea4a 0204 	orr.w	r2, sl, r4
 80003d2:	51c2      	str	r2, [r0, r7]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80003d4:	68c4      	ldr	r4, [r0, #12]
 80003d6:	ea4f 2a13 	mov.w	sl, r3, lsr #8
 80003da:	fa9a f2aa 	rbit	r2, sl
 80003de:	fab2 fb82 	clz	fp, r2
 80003e2:	690a      	ldr	r2, [r1, #16]
 80003e4:	fa02 f20b 	lsl.w	r2, r2, fp
 80003e8:	ea24 040a 	bic.w	r4, r4, sl
 80003ec:	4322      	orrs	r2, r4
 80003ee:	60c2      	str	r2, [r0, #12]
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80003f0:	684a      	ldr	r2, [r1, #4]
 80003f2:	f022 0208 	bic.w	r2, r2, #8
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	d00d      	beq.n	8000416 <LL_GPIO_Init+0xa8>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
      }
    }
    pinpos++;
 80003fa:	3501      	adds	r5, #1
  while ((pinmask  >> pinpos) != 0u)
 80003fc:	fa36 f305 	lsrs.w	r3, r6, r5
 8000400:	d033      	beq.n	800046a <LL_GPIO_Init+0xfc>
    if ((pinmask & (1u << pinpos)) != 0u)
 8000402:	fa0c f305 	lsl.w	r3, ip, r5
 8000406:	4233      	tst	r3, r6
 8000408:	d0f7      	beq.n	80003fa <LL_GPIO_Init+0x8c>
      if (pinpos < GPIO_PIN_MASK_POS)
 800040a:	2d07      	cmp	r5, #7
 800040c:	d8c4      	bhi.n	8000398 <LL_GPIO_Init+0x2a>
        currentpin = (0x00000101uL << pinpos);
 800040e:	f240 1301 	movw	r3, #257	; 0x101
 8000412:	40ab      	lsls	r3, r5
 8000414:	e7c8      	b.n	80003a8 <LL_GPIO_Init+0x3a>
 8000416:	fa93 f2a3 	rbit	r2, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800041a:	fab2 f282 	clz	r2, r2
 800041e:	fa93 faa3 	rbit	sl, r3
 8000422:	0092      	lsls	r2, r2, #2
 8000424:	fa08 f202 	lsl.w	r2, r8, r2
 8000428:	59c4      	ldr	r4, [r0, r7]
 800042a:	ea24 0202 	bic.w	r2, r4, r2
 800042e:	faba fa8a 	clz	sl, sl
 8000432:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000436:	688c      	ldr	r4, [r1, #8]
 8000438:	fa04 fa0a 	lsl.w	sl, r4, sl
 800043c:	ea42 020a 	orr.w	r2, r2, sl
 8000440:	51c2      	str	r2, [r0, r7]
 8000442:	fa93 f4a3 	rbit	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000446:	fab4 f484 	clz	r4, r4
 800044a:	fa93 f3a3 	rbit	r3, r3
 800044e:	00a4      	lsls	r4, r4, #2
 8000450:	fa09 f404 	lsl.w	r4, r9, r4
 8000454:	ea22 0204 	bic.w	r2, r2, r4
 8000458:	fab3 f383 	clz	r3, r3
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	68cc      	ldr	r4, [r1, #12]
 8000460:	fa04 f303 	lsl.w	r3, r4, r3
 8000464:	431a      	orrs	r2, r3
 8000466:	51c2      	str	r2, [r0, r7]
 8000468:	e7c7      	b.n	80003fa <LL_GPIO_Init+0x8c>
  }
  return (SUCCESS);
}
 800046a:	2000      	movs	r0, #0
 800046c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000470 <LL_Init1msTick>:
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <LL_Init1msTick+0x18>)
 8000472:	fba3 3000 	umull	r3, r0, r3, r0
 8000476:	0980      	lsrs	r0, r0, #6
 8000478:	3801      	subs	r0, #1
 800047a:	4b04      	ldr	r3, [pc, #16]	; (800048c <LL_Init1msTick+0x1c>)
 800047c:	6058      	str	r0, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	2207      	movs	r2, #7
 8000484:	601a      	str	r2, [r3, #0]
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
}
 8000486:	4770      	bx	lr
 8000488:	10624dd3 	.word	0x10624dd3
 800048c:	e000e010 	.word	0xe000e010

08000490 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000490:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000492:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <LL_mDelay+0x30>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000498:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800049a:	f1b0 3fff 	cmp.w	r0, #4294967295
  {
    Delay++;
 800049e:	bf18      	it	ne
 80004a0:	3001      	addne	r0, #1
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80004a2:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <LL_mDelay+0x30>)
  while (Delay)
 80004a4:	b148      	cbz	r0, 80004ba <LL_mDelay+0x2a>
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80004a6:	6813      	ldr	r3, [r2, #0]
 80004a8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80004ac:	d103      	bne.n	80004b6 <LL_mDelay+0x26>
 80004ae:	6813      	ldr	r3, [r2, #0]
 80004b0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80004b4:	d0fb      	beq.n	80004ae <LL_mDelay+0x1e>
    {
      Delay--;
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7f4      	b.n	80004a4 <LL_mDelay+0x14>
    }
  }
}
 80004ba:	b002      	add	sp, #8
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	e000e010 	.word	0xe000e010

080004c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004c6:	e003      	b.n	80004d0 <LoopCopyDataInit>

080004c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004c8:	4b0b      	ldr	r3, [pc, #44]	; (80004f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004ce:	3104      	adds	r1, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004d0:	480a      	ldr	r0, [pc, #40]	; (80004fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004d2:	4b0b      	ldr	r3, [pc, #44]	; (8000500 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004d8:	d3f6      	bcc.n	80004c8 <CopyDataInit>
  ldr r2, =_sbss
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004dc:	e002      	b.n	80004e4 <LoopFillZerobss>

080004de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004e0:	f842 3b04 	str.w	r3, [r2], #4

080004e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004e8:	d3f9      	bcc.n	80004de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004ea:	f7ff feef 	bl	80002cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ee:	f000 f80f 	bl	8000510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004f2:	f7ff ff27 	bl	8000344 <main>
  bx lr
 80004f6:	4770      	bx	lr
  ldr r3, =_sidata
 80004f8:	08000578 	.word	0x08000578
  ldr r0, =_sdata
 80004fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000500:	20000000 	.word	0x20000000
  ldr r2, =_sbss
 8000504:	20000000 	.word	0x20000000
  ldr r3, = _ebss
 8000508:	20000044 	.word	0x20000044

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>
	...

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2500      	movs	r5, #0
 8000514:	4e0c      	ldr	r6, [pc, #48]	; (8000548 <__libc_init_array+0x38>)
 8000516:	4c0d      	ldr	r4, [pc, #52]	; (800054c <__libc_init_array+0x3c>)
 8000518:	1ba4      	subs	r4, r4, r6
 800051a:	10a4      	asrs	r4, r4, #2
 800051c:	42a5      	cmp	r5, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	f000 f81a 	bl	8000558 <_init>
 8000524:	2500      	movs	r5, #0
 8000526:	4e0a      	ldr	r6, [pc, #40]	; (8000550 <__libc_init_array+0x40>)
 8000528:	4c0a      	ldr	r4, [pc, #40]	; (8000554 <__libc_init_array+0x44>)
 800052a:	1ba4      	subs	r4, r4, r6
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	42a5      	cmp	r5, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000538:	4798      	blx	r3
 800053a:	3501      	adds	r5, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000542:	4798      	blx	r3
 8000544:	3501      	adds	r5, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08000570 	.word	0x08000570
 800054c:	08000570 	.word	0x08000570
 8000550:	08000570 	.word	0x08000570
 8000554:	08000574 	.word	0x08000574

08000558 <_init>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr

08000564 <_fini>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr
